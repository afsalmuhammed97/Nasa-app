package com.afsal.dev.nasaapp.helperimport kotlinx.coroutines.flow.*import kotlinx.coroutines.flow.firstimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.mapinline fun <ResultType, RequestType> networkBoundResource(    crossinline query: () -> Flow<ResultType>,    crossinline fetch: suspend () -> RequestType,    crossinline saveFetchResult: suspend (RequestType) -> Unit,    crossinline shouldFetch: (ResultType) -> Boolean = { true }) = flow {    val data = query().first()    //get the data from db    val flow = if (shouldFetch(data)) {        emit(Resource.Loading(data)) //load the cached data        try {            saveFetchResult(fetch()) //save to chach            query().map {                Resource.Success(it)            }        } catch (throwable: Throwable) {            query().map {                Resource.Error(throwable, it)            }        }    } else {        query().map { Resource.Success(it) }    }    emitAll(flow)}